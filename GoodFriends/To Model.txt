1. Compile and Run SeidoApplication. 
   Output to the Console should be something like:

Please ensure appsettings.Development.json is copied to /Users/Martin/.local/share/Advanced Project/SeidoDbCRUD

2. Copy "appsettings.json" and "appsettings.Development.json" to the directory indicated in step1 and re-run the program
	- Your should have the Database Connection String as output on the console
   Output to the Console should now be something like:

AppSettings Directory: /Users/Martin/.local/share/Advanced Project/SeidoDbCRUD
Database type: SQLServer
Connection used: SQLServer-seidowebservice-docker

Error: Database could not be seeded. Ensure the SQLServer database is correctly created

3. In Windows, open PMC and ensure that the Class Library, DbContextLib, is the default project.
   On Mac open a terminal in DbContextLib directory.

4. Create Database migrations. On macOS in the terminal, type below commands.
   (After each migration you will get a success confirmation)

dotnet ef migrations add initial_migration --context SqlServerDbContext --output-dir Migrations/SqlServerMigrations
dotnet ef migrations add initial_migration --context MySqlDbContext --output-dir Migrations/MySqlMigrations
dotnet ef migrations add initial_migration --context PostgresDbContext --output-dir Migrations/PostgresMigrations
dotnet ef migrations add initial_migration --context SqliteDbContext --output-dir Migrations/SqliteMigrations

5. Commit the migrations to the Database (create the databases). On macOS in the terminal, type below commands.
   (After each committment you will get a success confirmation)

dotnet ef database update --context SqlServerDbContext
dotnet ef database update --context MySqlDbContext
dotnet ef database update --context PostgresDbContext
dotnet ef database update --context SqliteDbContext

6
. Run the program and each databases should seeded and CRUD tested